实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
示例 4：

输入：nums = [1]
输出：[1]
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 100

/**
 * 找出余下的数组中是否存在最大的
 *
 *
 *
 *
 *
 */
private void nextPermunation(int[] nums){
	int length = nums.length;
	int second = nums[1];
	int max = second;
	// 记录当前下标位置
	int index = 0;
	for(int i = 1, i < length; i++){
		if(nums[i] > max){
			max = nums[i];
			index = i;
			break;
		}
	}
	
	if(max > second){
		nums[1] = max;
		nums[index] = second;
	}else{
	
	}
	
}