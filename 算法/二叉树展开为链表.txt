114. 二叉树展开为链表
给你二叉树的根结点 root ，请你将它展开为一个单链表：

展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。
展开后的单链表应该与二叉树 先序遍历 顺序相同。
 

示例 1：


输入：root = [1,2,5,3,4,null,6]
输出：[1,null,2,null,3,null,4,null,5,null,6]
示例 2：

输入：root = []
输出：[]
示例 3：

输入：root = [0]
输出：[0]



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     public void flatten(TreeNode root) {
		List<TreeNode> list = new ArrayList<TreeNode>();
		preOrder(root, list);
		// 构建链表
		for(int i =1; i < list.size(); i++){
			// 重构树节点
			TreeNode pret = list.get(i - 1);
			TreeNode cur = list.get(i);
			pret.left = null;
			pret.right = cur;
			
		}
		
    }
	// 前序遍历获取所有节点
	public void preOrder(TreeNode root, List<TreeNode> list){
		if(root == null){
			return;
		}
		list.add(root);
		preOrder(root.left, list);
		preOrder(root.right, list);
		
	}
}



class Solution {
     public void flatten(TreeNode root) {
		List<TreeNode> list = new ArrayList<TreeNode>();
		preOrder(root, list);
		
		TreeNode newNode = new TreeNode(-1);
		TreeNode cur = newNode(list.get(0));
		newNode.left = null;
		newNode.right = cur;
		
		// 构建链表
		for(int i =1; i < list.size(); i++){
			cur.left = null;
			cur.right = newNode(list.get(i));
			cur = newNode(list.get(i));
		}
		return newNode.right;
    }
	// 前序遍历获取所有节点
	public void preOrder(TreeNode root, List<TreeNode> list){
		if(root == null){
			return;
		}
		list.add(root.val);
		preOrder(root.left, list);
		preOrder(root.right, list);
		
	}
}







