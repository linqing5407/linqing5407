路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。
同一个节点在一条路径序列中 至多出现一次 。
该路径 至少包含一个 节点，且不一定经过根节点。

路径和 是路径中各节点值的总和。

给你一个二叉树的根节点 root ，返回其 最大路径和 。
示例 1：


输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6
示例 2：


输入：root = [-10,9,20,null,null,15,7]
输出：42
解释：最优路径是 15 -> 20 -> 7 ，路径和为 15 + 20 + 7 = 42
 

提示：
树中节点数目范围是 [1, 3 * 104]
-1000 <= Node.val <= 1000
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
class Solution {

     int maxVal;
    public int maxPathSum(TreeNode treeNode) {
		maxVal = Integer.MIN_VALUE;
        int result = dfs(treeNode);
        return maxVal;
    }

       public  int dfs(TreeNode treeNode){
        if(treeNode == null){
            return 0;
        }
		// 由于结点的值有可能为负数，因此如果子树得到的路径是负数，可以舍弃，表现为和 0 取最大值
        int leftSubTreeSum = Math.max(0, dfs(treeNode.left));
        int rightSubTreeSum = Math.max(0, dfs(treeNode.right));
		// 在深度优先遍历的过程中选出最大值
        maxVal = Math.max(maxVal, treeNode.val + leftSubTreeSum + rightSubTreeSum);
		
        // 返回 （根 + 左）   或者 （根 + 右）的较大值
        return treeNode.val + Math.max(leftSubTreeSum, rightSubTreeSum);
    }
}
 
 

public class Solution {

    private int res;

    public int maxPathSum(TreeNode root) {
        res = Integer.MIN_VALUE;
        dfs(root);
        return res;
    }


    /**
     * 规定 node 必须被选取
     *
     * @param node
     * @return 返回必须经过 node 的直的路径的最大和，这条路径到 node 为止，即：这条路径在左子树和右子树的路径中只能选择一条
     */
    private int dfs(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        // 这里体现了「后序遍历」，先递归求解左、右子树
        // 由于结点的值有可能为负数，因此如果子树得到的路径是负数，可以舍弃，表现为和 0 取最大值
        int leftSubTreeSum = Math.max(0, dfs(node.left));
        int rightSubTreeSum = Math.max(0, dfs(node.right));
        
        // node.val 必须被选择体现在这里
        // 在深度优先遍历的过程中选出最大值
        res = Math.max(res, node.val + leftSubTreeSum + rightSubTreeSum);
        
        // node.val 必须被选择体现在这里
        return node.val + Math.max(leftSubTreeSum, rightSubTreeSum);
    }
} 
 
 
[1,-2,-3,1,3,-2,null,-1]



   public int maxPathSum(TreeNode root) {
	List<Integer>  listNUm = new ArrayList<Integer>();
	// 中序遍历获取路径数据
	midOrder(root, listNUm);
	// 求最大子序和  暴力破解 (笛卡尔集)  贪心算法  动态规划  9  -10  15  20  7
	int maxSum = -10000;
	int preValue = 0;
	for(int i = 0; i < listNUm.size(); i++){
		// 判断某个节点是否大于最大值
		if(listNUm.get(i) > maxSum){
			maxSum = listNUm.get(i);
		}
		preValue = preValue + listNUm.get(i);
		if(preValue > maxSum){
			maxSum = preValue;
		}
		// 如果到当前序列和小于0  则归零从后续开始相加
		if(preValue < 0){
			preValue = 0;
		}
	}
	return maxSum;
    }

public void midOrder(TreeNode node, List<Integer> listNum){
	if(node == null){
		return;
	}
	midOrder(node.left, listNum);
	midOrder(node.right, listNum);
	listNum.add(node.val);
}



树形 DP（后序遍历、动态规划，附同类问题）
liweiwei1419
发布于 2021-05-22
977
本题解介绍了这一类问题需要如何思考。最重要的思想是「后序遍历」和动态规划的「无后效性」。

如果觉得内容比较多的话，可以先看看题解最后的视频，了解程序是如何通过「后序遍历」，记录了子问题的解，从而得到原问题的解。

首先我们需要理解题意。

明确什么是「路径」（非常重要）
任意给出一棵二叉树的两个结点，路径指的是：分别从这两个结点向上走，找到 最近的公共祖先 结点而形成的路径。只有这样的定义下，路径才是唯一确定的。

下图展示的是同一棵树，不同的结点 A 和结点 B 定义的直径（图中绿色标注的部分）。其中左图展示的路径经过了根结点，右图展示的路径不经过根结点。

image.png

下面的树种绿色结点构成的部分不符合题目中路径的定义。

image.png

也就是说：路径上的每一个结点最多只与 2 条边连接。

友情提示：确定定义非常关键，直接决定了这道问题是否有解。

无后效性
根据「直径」的定义，这条路径一定会经过某一个结点。而最长的直径会经过哪一个结点这件事情不确定。

动态规划求解的思路需要考虑所有子问题，也就是 每一个结点产生的子问题都会考虑到。因此我们在设计子问题的时候，就要求我们求解的 子问题 的直径 必须经过子问题表述的子树的根结点。

在设计状态的时候，把不确定的事情确定下来，计算得到结果，是「动态规划」的设计思想「无后效性」的应用。我们想一想打家劫舍问题（「力扣」第 198 题）、最长上升子序列问题（「力扣」第 300 题）的状态定义。打家劫舍问题，某一个房间可以偷也可以不偷，我们分别求出，某一个房间被偷的时候的子问题的结果，某一个房间不被偷的时候的子问题的结果，通过比较得出最优值。

另一件事情，路径可能是「直」的，也可能是「弯」的。「直」和「弯」的定义如下（虽然左边「直」的看起来也很「弯」，大家看图中红字的定义哦）：

image.png

我们只规定子问题求解得到的路径是「直」的。为什么这么规定呢？因为 「直的」情况简单，它可以组成复杂的「弯」的情况。

状态定义
我们规定必须经过子树的根结点，并且最大路径的和表示的路径只来自左子树和右子树 其中之一 的 最大值。也就是说，这条「路径」其实只走一边。

我们把不确定的、需要分类讨论的事情确定下来，以便求解。

为什么是「后序遍历」
深度优先遍历就是从根结点开始在树中转一圈，最后回到根结点。我们采用后序遍历计算结果的方式，表现为：

从叶子结点开始，一层一层向上传递信息，最后在根结点汇总结果。

为什么是「后序遍历」呢？

因为二叉树从子结点到父结点只会有一条路径；
而从根结点到子节点至多会有两条路径。
「后序遍历」相当于 先求得两个子问题的结果，再根据两个子问题的结果得到当前规模更大的子问题的结果，这是「分而治之」的思想。

题目问的结果在求解子问题的过程中得到
我们对状态的定义规定了只来自左右子树的一边，在后序遍历的时候，左右子树的结果都求得的情况下，当前结点就可以把左右两棵子树的求解结果进行综合，就是题目要求的 经过某个结点 的最大路径和。

下面给出「参考代码」，我们把需要注意的地方作为注释写在代码中，「树形 DP」与的状态设计与状态转移是隐含在递归方法里的，这一点请大家留意。

大家可以先理解代码，代码之后有一个具体的例子，展示了代码是如何执行，并计算题目要求的结果的。

参考代码：


public class Solution {

    private int res;

    public int maxPathSum(TreeNode root) {
        res = Integer.MIN_VALUE;
        dfs(root);
        return res;
    }


    /**
     * 规定 node 必须被选取
     *
     * @param node
     * @return 返回必须经过 node 的直的路径的最大和，这条路径到 node 为止，即：这条路径在左子树和右子树的路径中只能选择一条
     */
    private int dfs(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        // 这里体现了「后序遍历」，先递归求解左、右子树
        // 由于结点的值有可能为负数，因此如果子树得到的路径是负数，可以舍弃，表现为和 0 取最大值
        int leftSubTreeSum = Math.max(0, dfs(node.left));
        int rightSubTreeSum = Math.max(0, dfs(node.right));
        
        // node.val 必须被选择体现在这里
        // 在深度优先遍历的过程中选出最大值
        res = Math.max(res, node.val + leftSubTreeSum + rightSubTreeSum);
        
        // node.val 必须被选择体现在这里
        return node.val + Math.max(leftSubTreeSum, rightSubTreeSum);
    }
}
时间复杂度：遍历了树一次，因此时间复杂度为 O(N)O(N)，这里 NN 为二叉树的结点总数。

下面的视频可以帮助大家理解程序是如何运行的（本来传的是幻灯片，但是显示不出来）。






方法一：递归
首先，考虑实现一个简化的函数 maxGain(node)，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。

具体而言，该函数的计算如下。

空节点的最大贡献值等于 00。

非空节点的最大贡献值等于节点值与其子节点中的最大贡献值之和（对于叶节点而言，最大贡献值等于节点值）。

例如，考虑如下二叉树。


   -10
   / \
  9  20
    /  \
   15   7

叶节点 9、15、7 的最大贡献值分别为 9、15、7。

得到叶节点的最大贡献值之后，再计算非叶节点的最大贡献值。节点 20 的最大贡献值等于 20+max(15,7)=35，节点 -10 的最大贡献值等于 -10+max(9,35)=25。

上述计算过程是递归的过程，因此，对根节点调用函数 maxGain，即可得到每个节点的最大贡献值。

根据函数 maxGain 得到每个节点的最大贡献值之后，如何得到二叉树的最大路径和？
对于二叉树中的一个节点，该节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值，如果子节点的最大贡献值为正，
则计入该节点的最大路径和，否则不计入该节点的最大路径和。维护一个全局变量 maxSum 存储最大路径和，在递归过程中更新 maxSum 的值，
最后得到的 maxSum 的值即为二叉树中的最大路径和。




class Solution {
    int maxSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        maxGain(root);
        return maxSum;
    }

    public int maxGain(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        // 递归计算左右子节点的最大贡献值
        // 只有在最大贡献值大于 0 时，才会选取对应子节点
        int leftGain = Math.max(maxGain(node.left), 0);
        int rightGain = Math.max(maxGain(node.right), 0);

        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值
        int priceNewpath = node.val + leftGain + rightGain;

        // 更新答案
        maxSum = Math.max(maxSum, priceNewpath);

        // 返回节点的最大贡献值
        return node.val + Math.max(leftGain, rightGain);
    }
}




 int maxSum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        maxGain(root);
        return maxSum;
    }

    public int maxGain(TreeNode node) {
        if (node == null) {
            return 0;
        }
        
        // 递归计算左右子节点的最大贡献值
        // 只有在最大贡献值大于 0 时，才会选取对应子节点
        int leftGain = Math.max(maxGain(node.left), 0);
        int rightGain = Math.max(maxGain(node.right), 0);

        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值
        int priceNewpath = node.val + leftGain + rightGain;

        // 更新答案
        maxSum = Math.max(maxSum, priceNewpath);

        // 返回节点的最大贡献值
        return node.val + Math.max(leftGain, rightGain);
    }


124. 二叉树中的最大路径和
/left,right分别为根节点左右子树最大路径和,注意：如果最大路径和<0,意味着该路径和对总路径和做负贡献，因此不要计入到总路径中，将它设置为0


int res = INT_MIN; //注意节点值可能为负数，因此要设置为最小值
int maxPathSum(TreeNode *root)
{
    maxPath(root);
    return res;
}

int maxPath(TreeNode *root) //以root为路径起始点的最长路径
{
    if (!root)
        return 0;
    int left = max(maxPath(root->left), 0);
    int right = max(maxPath(root->right), 0);
    res = max(res, left + right + root->val);  //比较当前最大路径和与左右子树最长路径加上根节点值的较大值，更新全局变量
    return max(left + root->val, right + root->val); //返回左右子树较长的路径加上根节点值
}


不用看官方题解，那么复杂。 所有树的题目，都想成一颗只有根、左节点、右节点 的小树。然后一颗颗小树构成整棵大树，
所以只需要考虑这颗小树即可。接下来分情况， 按照题意：一颗三个节点的小树的结果只可能有如下6种情况：

根 + 左 + 右
根 + 左
根 + 右
根
左
右
好了，分析上述6种情况， 只有 2,3,4 可以向上累加，而1,5,6不可以累加（这个很好想，情况1向上累加的话，必然出现分叉，情况5和6直接就跟上面的树枝断开的，没法累加），所以我们找一个全局变量存储 1,5,6这三种不可累加的最大值， 另一方面咱们用遍历树的方法求2,3,4这三种可以累加的情况。 最后把两类情况得到的最大值再取一个最大值即可。

class Solution(object):
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.max_sum = -sys.maxsize - 1

        def scan(root):
            if root is None:
                return -sys.maxsize - 1
            left = scan(root.left)
            right = scan(root.right)
            self.max_sum = max(self.max_sum, root.val + left + right, left, right) # 情况1,5,6，不累加直接放变量里暂存
            return max(root.val, root.val + left, root.val + right)  # 情况2,3,4 ，累加需要递归

        new_max = scan(root)
        return max(self.max_sum, new_max)  # 两类情况再求最大

[1,-2,-3,1,3,-2,null,-1]










