给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

 

示例 1：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
示例 2：

输入：nums = [0,1]
输出：[[0,1],[1,0]]
示例 3：

输入：nums = [1]
输出：[[1]]
 

提示：

1 <= nums.length <= 6
-10 <= nums[i] <= 10
nums 中的所有整数 互不相同
通过次数326,185提交次数418,654

public List<List<Integer>> permute(int[] nums) {
      int len = nums.length;

        List<List<Integer>> listresult = new ArrayList<List<Integer>>();
        if(len == 0){
            return listresult;
        }

        List<Integer> currentList = new ArrayList<Integer>();
        // 构建一个对应数组， 记录已经一条路径上已经被使用的元素 数组初始默认都是false
        boolean[] used = new boolean[len];

        dfs(listresult, currentList, used, nums, 0);
        return listresult;
    }
 public static void dfs(List<List<Integer>> listresult, List<Integer> currentList, boolean[] used, int[] nums, int start){
	// 深度够了直接加入后返回
	if(start == (nums.length)){
		// 构建一个新的对象防止对象引用
		listresult.add(new ArrayList<>(currentList));
		return;
	}

	for(int i = 0; i < nums.length; i++) {
		// 判断数组是否被使用
		if(!used[i]){
			// 已经使用
			used[i] = true;
			currentList.add(nums[i]);
			dfs(listresult, currentList, used, nums, start + 1);
			// 回朔 将某个元素置为可用
			used[i] = false;
			// 移除队尾的元素回朔到上一层
			currentList.remove(currentList.size() - 1);
		}

	}
}