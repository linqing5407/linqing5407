输入：head = [-1,5,3,4,0]
输出：[-1,0,3,4,5]
示例 3：

输入：head = []
输出：[]
 

提示：

链表中节点的数目在范围 [0, 5 * 104] 内
-105 <= Node.val <= 105

输入：head = [4,2,1,3]
输出：[1,2,3,4]

给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。

进阶：

你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？
前言
「147. 对链表进行插入排序」要求使用插入排序的方法对链表进行排序，插入排序的时间复杂度是 O(n^2)O(n 
2
 )，其中 nn 是链表的长度。这道题考虑时间复杂度更低的排序算法。题目的进阶问题要求达到 O(n \log n)O(nlogn) 的时间复杂度和 O(1)O(1) 的空间复杂度，时间复杂度是 O(n \log n)O(nlogn) 的排序算法包括归并排序、堆排序和快速排序（快速排序的最差时间复杂度是 O(n^2)O(n 
2
 )），其中最适合链表的排序算法是归并排序。

归并排序基于分治算法。最容易想到的实现方式是自顶向下的递归实现，考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是 O(\log n)O(logn)。如果要达到 O(1)O(1) 的空间复杂度，
则需要使用自底向上的实现方式。

方法一：自顶向下归并排序
对链表自顶向下归并排序的过程如下。

找到链表的中点，以中点为分界，将链表拆分成两个子链表。寻找链表的中点可以使用快慢指针的做法，快指针每次移动 2 步，慢指针每次移动 1 步，当快指针到达链表末尾时，

.慢指针指向的链表节点即为链表的中点。

对两个子链表分别排序。

将两个排序后的子链表合并，得到完整的排序后的链表。可以使用「21. 合并两个有序链表」的做法，将两个有序的子链表进行合并。

上述过程可以通过递归实现。递归的终止条件是链表的节点个数小于或等于 1，即当链表为空或者链表只包含 1 个节点时，不需要对链表进行拆分和排序。



public class ListNode{

 int val;
 ListNode next;
 
 ListNode(){
 
 }
 ListNode(int num){
	this.val = num;
 }
 ListNode(int num, ListNode node){
	this.val = num;
	this.next = node; 
 }

 
 public ListNode sortList(ListNode head){
	sortList(head, null);
 }
 
  public ListNode sortList(ListNode head, ListNode tail){
	
	if(head == null){
		return head;
	}
	if(head.next == tail){
		head.next = null;
		return head;
	}
	// 快满指针找到中点位置
	ListNode slow = head;
	ListNode fast = head;
	while(fast != tail){
		slow = slow.next;
		fast = fast.next;
		if(fast != tail){
			fast = fast.next;
		}
	}
	
	ListNode mid = slow;
	ListNode list1 = sortList(head, mid);
	ListNode list2 = sortList(mid, head);
	ListNode sorted = merge(list1, list2);
	return sorted;
 }
 
  public ListNode merge(ListNode head1, ListNode head2) {
        // 构建一个虚拟节点
		ListNode virsul = new ListNode(0);
		ListNode current = virsul;
		ListNode currentFirst = head1;
		ListNode currentSecond = head2;
		while(currentFirst != null && currentSecond != null){
			//将小的节点挂上
			if(currentFirst.val < currentSecond.val){
				current.next = currentFirst;
				currentFirst = currentFirst.next;
			}else{
				current.next = currentSecond;
				currentSecond = currentSecond.next;
			}
		   current = current.next;
		}
		//拼接完剩余的节点直接挂上
		if(currentFirst != null){
			current.next = currentFirst;
		}
		if(currentSecond != null){
			current.next = currentSecond;
		}
	return virsul.next;	
  }
 
}









class Solution {
    public ListNode sortList(ListNode head) {
        return sortList(head, null);
    }

    public ListNode sortList(ListNode head, ListNode tail) {
        if (head == null) {
            return head;
        }
        if (head.next == tail) {
            head.next = null;
            return head;
        }
        ListNode slow = head, fast = head;
        while (fast != tail) {
            slow = slow.next;
            fast = fast.next;
            if (fast != tail) {
                fast = fast.next;
            }
        }
        ListNode mid = slow;
        ListNode list1 = sortList(head, mid);
        ListNode list2 = sortList(mid, tail);
        ListNode sorted = merge(list1, list2);
        return sorted;
    }

    public ListNode merge(ListNode head1, ListNode head2) {
        ListNode dummyHead = new ListNode(0);
        ListNode temp = dummyHead, temp1 = head1, temp2 = head2;
        while (temp1 != null && temp2 != null) {
            if (temp1.val <= temp2.val) {
                temp.next = temp1;
                temp1 = temp1.next;
            } else {
                temp.next = temp2;
                temp2 = temp2.next;
            }
            temp = temp.next;
        }
        if (temp1 != null) {
            temp.next = temp1;
        } else if (temp2 != null) {
            temp.next = temp2;
        }
        return dummyHead.next;
    }
}





