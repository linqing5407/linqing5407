98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1

输入
    2
    
  1   3
输出 true
示例 2

输入
    5
    
  1   4
      
    3   6
输出 false
解释 输入为 [5,1,4,null,null,3,6]。
根节点的值为 5 ，但是其右子节点值为 4 。



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public boolean isTree(TreeNode treeNode){

	boolean result = true;
	dfs(treeNode, result);
	return result;
}

[5,1,4,null,null,3,6]


   public static void dfs(TreeNode treeNode,List<Boolean> list){
        //节点为空直接返回
        if(treeNode == null){
            return;
        }

        // 跳出条件 子树遍历完成
        if(treeNode.left == null && treeNode.right == null){
            return;
        }

        //  左子树大于节点 异常
        if(treeNode.left != null && treeNode.left.val >= treeNode.val){
            list.add(false);
            return;
        }

        // 右子树小于节点  判断不是有效二叉树
        if(treeNode.right != null && treeNode.right.val <= treeNode.val){
            list.add(false);
            return;
        }


        // 继续向下遍历判断是否符合条件 回朔递归
        dfs(treeNode.left, list);
        if(!list.isEmpty()){
            return;
        }
        dfs(treeNode.right, list);
    }



 public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean isValidBST(TreeNode node, long lower, long upper) {
        if (node == null) {
            return true;
        }
        if (node.val <= lower || node.val >= upper) {
            return false;
        }
        return isValidBST(node.left, lower, node.val) && isValidBST(node.right, node.val, upper);
    }

class Solution {
    public boolean isValidBST(TreeNode root) {
        Deque<TreeNode> stack = new LinkedList<TreeNode>();
        double inorder = -Double.MAX_VALUE;

        while (!stack.isEmpty() || root != null) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
              // 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树
            if (root.val <= inorder) {
                return false;
            }
            inorder = root.val;
            root = root.right;
        }
        return true;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

	Long pre = Long.MIN_VALUE;
	

    public boolean isValidBST(TreeNode root) {
       middle( root)；
    }
	
	
	public boolean middle(TreeNode root){
	
		if(root == null){
			return true;
		}
		
		middle(root.left);
	
		if(root.val <= pre){
			return false;
		}
		pre = root.val;
		
		return middle(root.right);

}

｝








