34. 在排序数组中查找元素的第一个和最后一个位置
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

进阶：

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
 

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]
示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]
示例 3：

输入：nums = [], target = 0
输出：[-1,-1]
 

提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums 是一个非递减数组
-109 <= target <= 109
通过次数255,384提交次数601,636

输入：nums = [5,7,7,8,8,10], target = 6

public int[] getTargetFromArrays(int[] nums, int target){
	int right = nums.length() - 1;
	int left = 0;
	int start = -1;
	int end = -1;
	
	List<Integer> resList = new ArrayList<Integer>();
	if(right == -1){
		return new int[] {-1,-1};
	}
	while (left <= right) {
		int mid = (left + right) / 2;
		// 找到
		if(nums[mid] == target){
			start = mid;
			end = mid;
			// 数据可能重复都在周边遍历周报的值
			while((end + 1) <= right){
				if(nums[end + 1] == target){
					end ++;
				}else{
					breake;
				}
			}
			
			
			while(start - 1 >= left){
				if(nums[start - 1] == target){
					start--;
				}else{
					breake;
				}
			}
			
			return resList.toArrays();
		} else if(nums[mid] < target ){
		    left = mid + 1;
		}else {
		    right = mid - 1;
		}
		
	}
	
	
	return new int[] {-1,-1};
	
}





























