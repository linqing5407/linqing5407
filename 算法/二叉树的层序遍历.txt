给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。

 

示例：
二叉树：[3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层序遍历结果：

[
  [3],
  [9,20],
  [15,7]
]



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

     /**
     * add        增加一个元索                     如果队列已满，则抛出一个IIIegaISlabEepeplian异常
     * remove   移除并返回队列头部的元素    如果队列为空，则抛出一个NoSuchElementException异常
     * element  返回队列头部的元素             如果队列为空，则抛出一个NoSuchElementException异常
     * offer       添加一个元素并返回true       如果队列已满，则返回false
     * poll         移除并返问队列头部的元素    如果队列为空，则返回null
     * peek       返回队列头部的元素             如果队列为空，则返回null
     * put         添加一个元素                      如果队列满，则阻塞
     * take        移除并返回队列头部的元素     如果队列为空，则阻塞
     * @param treeNode
     * @param listResult
     */
 public static void levelOrder(TreeNode treeNode, List<List<Integer>> listResult){
	// 队列先进先出
	Queue<TreeNode> rootQueue = new LinkedList<>();
	List<Integer> listCurrent = new ArrayList<Integer>();
	rootQueue.add(treeNode);
	while(rootQueue.size()>0){
		TreeNode root = rootQueue.poll();
		listCurrent.add(root.val);
		if(root.left != null){
			rootQueue.offer(root.left);
		}
		if(root.right != null){
			rootQueue.offer(root.right);
		}
	}

}
 
public List<List<Integer>> levelOrder(TreeNode root){

	List<List<Integer>> listResult =new ArrayList<List<Integer>>();
	
	
	
	
}

public void levelOrder(TreeNode root, List<List<Integer>> listResult){
		// 队列存储 先进先出原则 按层级遍历
		Queue<TreeNode> rootQueue = new LinkedList<>();
		rootQueue.offer(root);
		while (rootQueue.size() > 0){
		List<Integer> currentList = new ArrayList<>();
		// 记录当前层级的长度
		int currentLevelSize = rootQueue.size()
		for(int i = 0; i < currentLevelSize; i ++){
			TreeNode node = rootQueue.poll();
			currentList.add(node.val);
			if(node.left != null){
				rootQueue.offer(node.left);
			}
			if(node.right != null){
				rootQueue.offer(node.right);
			}
		}
		listResult.add(currentList);
			
	}
	
}













