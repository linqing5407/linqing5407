给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1：

输入：candidates = [2,3,6,7], target = 7,
所求解集为：
[
  [7],
  [2,2,3]
]
示例 2：

输入：candidates = [2,3,5], target = 8,
所求解集为：
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
 

提示：

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
candidate 中的每个元素都是独一无二的。
1 <= target <= 500
通过次数260,708提交次数359,977
fmsKafkaPddSendxBusConsumerGroup_movewuhan
fmsKafkaSendxBusConsumerGroup_movewuhan
toFmsDeadMsgCommTopicGroup_movewuhan
toFmsRetryMsgTopicGroup_movewuhan
lockerAccountingConsumerGroup_movewuhan
courierNetConsumerGroup_movewuhan
fromFmsRetryMsgTopicFmsGroup_movewuhan
fromFmsDeadMsgCommTopicGroup_movewuhan
edmsFinanceBillFmsGroup_movewuhan




方法一：搜索回溯
思路与算法

对于这类寻找所有可行解的题，我们都可以尝试用「搜索回溯」的方法来解决。

回到本题，我们定义递归函数 dfs(target, combine, idx) 表示当前在 candidates 数组的第 idx 位，
还剩 target 要组合，已经组合的列表为 combine。递归的终止条件为 target <= 0 或者 candidates
 数组被全部用完。那么在当前的函数中，每次我们可以选择跳过不用第 idx 个数，即执行 dfs(target, combine, idx + 1)。
 也可以选择使用第 idx 个数，即执行 dfs(target - candidates[idx], combine, idx)，注意到每个数字可以被无限制重复选取，
 因此搜索的下标仍为 idx。更形象化地说，如果我们将整个搜索过程用一个树来表达，即如下图呈现，
 每次的搜索都会延伸出两个分叉，直到递归的终止条件，这样我们就能不重复且不遗漏地找到所有可行解：


  /**
     *
     * candidates = [2,3,6,7], target = 7,
     *
     * @param candidates 原始数组
     * @param target 目标值
     * 排序 便于后续剪枝 大于目标值的后面剪值
     * dfs 递归 回朔
     * 剪枝
     */
    public static List<List<Integer>> combinationSum(int[] candidates, int target) {

        List<List<Integer>> listResult = new ArrayList<List<Integer>>();
        if(candidates.length == 0){
            return listResult;
        }
        List<Integer> currentList = new ArrayList<Integer>();
        // 排序后便于后续判断 有自增性
        Arrays.sort(candidates);
        dfs(listResult, currentList, candidates, target);
        return listResult;
    }

    public static void main(String[] args) {
        List<List<Integer>> listResult =combinationSum(new int[]{2,1},3);
        System.out.println(listResult.toString());
    }

    public static void dfs(List<List<Integer>> listResult, List<Integer> currentList, int[] candidates, int target) {

        // 目标值小于0
        if(target < 0){
            return;
        }
        if(target == 0){
            listResult.add(new ArrayList<>(currentList));
            return;
        }
        // target 余下的数组是自增的 如果余下的值大于，余下的目标值就没必要继续了 剪枝
        for(int i =0; i < candidates.length && candidates[i] <= target; i++) {
            currentList.add(candidates[i]);
            dfs(listResult, currentList, candidates, target - candidates[i]);
            // 回朔到上一层
            currentList.remove(currentList.size() - 1);
        }





dfs递归+回溯+剪枝
思路：
这个和前面的列举所有情况一样。很容易想到用递归穷举所有排列。但是难点在于数字可以重复使用。以前是遍历过得元素不再使用，但现在遍历过得元素在下一个递归还可以再次遍历。
并且为了防止遍历结果重复，比如【2，3】和【3，2】这种重复的情况。我们遍历的时候只能从前往后遍历。以前的做法是每个递归中都遍历0-n，用记录标志判断这个元素是否遍历过。
现在不行，现在是比如第一个递归从0-n，第二个递归就是从1-n，如此递推。使用深度优先递归方法，当路径元素和等于目标和时结束。添加到结果集中。因为我们这个会重复遍历当前元素，为了避免陷入无限递归之中还需要先对数组排序，for循环数组的时候判断目标和-当前数组元素怒是否小于0，如果是，超过了目标和，当前及以后的元素怒都是无意义的。停止循环，这就是所谓的剪枝。

作者：te-te-n
链接：https://leetcode-cn.com/problems/combination-sum/solution/39-zu-he-zong-he-by-te-te-n-3r0b/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。













