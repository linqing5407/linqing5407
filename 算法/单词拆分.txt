给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false

const wordBreak = (s, wordDict) => {
	const len = s.length;
  	const wordSet = new Set(wordDict);

	const canBreak = (start) => { // 判断从start到末尾的子串能否break
		if (start == len) {//指针越界，s一步步成功划分为单词，才走到越界这步，现在没有剩余子串
			return true;   //返回真，结束递归
		}
		for (let i = start + 1; i <= len; i++) { //指针i去划分两部分，for枚举出当前所有的选项i
			const prefix = s.slice(start, i);    // 切出的前缀部分
			if (wordSet.has(prefix) && canBreak(i)) {// 前缀部分是单词，且剩余子串能break，返回真
				return true;                            
			} // 如果前缀部分不是单词，就不会执行canBreak(i)。进入下一轮迭代，再切出一个前缀串，再试
		}
		return false; // 指针i怎么划分，都没有返回true，则返回false
	}

	return canBreak(0); // 递归的入口，从0到末尾的子串能否break
}

作者：xiao_ben_zhu
链接：https://leetcode-cn.com/problems/word-break/solution/shou-hui-tu-jie-san-chong-fang-fa-dfs-bfs-dong-tai/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

public static void main(String[] args) {
        List<String> wordDict = new ArrayList<>();
      
        wordDict.add("apple");
        wordDict.add("pen");
        Set<String> dict = new HashSet<>(wordDict);
        Set<String> memonry = new HashSet<>(wordDict);
        boolean mm =  dfs( "applepenapple", dict,0);
        mm =mm;
    }



    private static boolean dfs(String s, Set<String> dict, int nums,  Set<String> memonry){

        if(s.length() == nums){
            return true;
        }
        StringBuilder currentStr =new StringBuilder();
        for(int i =nums; i < s.length(); i++){
            currentStr.append(s.charAt(i));
			if(memonry.contains(currentStr.toString())){
			 return false;
			}
            if(dict.contains(currentStr.toString())){
                boolean flag = dfs(s, dict, i + 1);
                if(flag == true){
                    return true;
                }else{
					memonry.add(currentStr.toString());
				}
            }
        }
		memonry.add(s);
        return false;

    }




解题思路一：记忆化DFS

public boolean DFS(String s,Set<String> set)，如果set集合中包含前面的子串，则不断的对s进行拆分。
边界条件，当s.length()==0时，返回true。(注意：下面的代码会超时)

public boolean DFS(String s,Set<String> set){
        if(s.length()==0) return true;
        StringBuilder strb = new StringBuilder();
        for(int i=0;i<s.length();i++){
            strb.append(s.charAt(i));
            if(set.contains(strb.toString())){
                if(DFS(s.substring(i+1),set)){
                    return true;
                }
            }
        }
        return false;
    }
	
	
	
	
原因是进行了大量重复的递归。考虑对递归结果进行记忆。有两种选择，1.记忆返回true的情况。2.记忆返回false的情况。
本题并未考察拆分的可能情况，所以只要有一个返回true即可，所以记忆返回true没有意义。由此，对未成功拆分的情况进行记忆，那么后续递归如果遇到相同情况即可提前结束递归。

class Solution {
    Set<String> memory = new HashSet<>();
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>();
        for(String str : wordDict){
            set.add(str);
        }
        return DFS(s,set);
    }
    public boolean DFS(String s,Set<String> set){
        if(s.length()==0) return true;
        if(memory.contains(s)) return false;//如果记忆中存在此字符串，返回false，结束递归。
        StringBuilder strb = new StringBuilder();
        for(int i=0;i<s.length();i++){
            strb.append(s.charAt(i));
            if(set.contains(strb.toString()) && !memory.contains(s.substring(i+1))){
                if(DFS(s.substring(i+1),set)){
                    return true;
                }else{
                    memory.add(s.substring(i+1));//对子串失败的情况进行记忆
                }
            }
        }
        memory.add(s);//对s失败的情况进行记忆
        return false;
    }
}





public boolean dfs(String s,Set<String> set){
	
	if(s.length() == 0){
		return true;
	}
	StringBuilder strb = new StringBuilder();
	for(int i = 0; i < s.length(); i++){
		strb.append(s.charAt(i));
		if(set.contains(strb.toString())){
			boolean flag = dfs(s.substring(i + 1),set);
			if(flag){
				return true;
			}
		}
	}
	return false;
}











解题思路二：动态规划

使用dp[i]表示前i个字符是否可以被拆分。boolean[] dp = new boolean[n+1];dp[0] = true;
递推公式dp[i]取决于dp[j] && set.contains(s.substring(j,i))，需要注意的是i和j的范围，和相应的取值。

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n = s.length();
        Set<String> set = new HashSet<>();
        for(String str : wordDict){
            set.add(str);
        }
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        for(int i=1;i<=n;i++){
            for(int j=0;j<i;j++){
                if(dp[j] && set.contains(s.substring(j,i))){
                    dp[i] = true;
                }
            }
        }
        return dp[n];
    }
}








